import React, { useState } from "react";

// VCAA Assessor AI - Single-file React component
// - Uses Tailwind CSS for styling (no import required in this environment)
// - Assumes user will run this inside a React + Tailwind project
// - User must provide their own OpenAI API key (client-side storage optional)
// - Includes legal compliance checks and explicit user confirmation when using VCAA materials
// - Exports a default React component

export default function VcaaAssessorApp() {
  const [subject, setSubject] = useState("");
  const [question, setQuestion] = useState("");
  const [markingGuide, setMarkingGuide] = useState("");
  const [studentResponse, setStudentResponse] = useState("");
  const [apiKey, setApiKey] = useState(() => localStorage.getItem("OPENAI_API_KEY") || "");
  const [useLocalKey, setUseLocalKey] = useState(true);
  const [agreeRights, setAgreeRights] = useState(false);
  const [consentVCAA, setConsentVCAA] = useState(false);
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState("\");
  const [error, setError] = useState("");
  const [model, setModel] = useState("gpt-4o-mini");

  // Helper to persist key in localStorage if user wants that
  function handleSaveKey(k) {
    setApiKey(k);
    localStorage.setItem("OPENAI_API_KEY", k);
  }

  function clearKey() {
    setApiKey("");
    localStorage.removeItem("OPENAI_API_KEY");
  }

  // Build the assistant system + user prompt exactly as the user requested
  function buildPrompt() {
    return `You are a VCAA VCE ${subject || "[SUBJECT]"} exam assessor.
I will give you:

The official question from a past VCAA exam.

The official marking guide for that question.

A student’s written answer.

Your task:

Compare the student’s answer to the marking guide criteria.

Assign a score exactly as VCAA would, explaining how each mark is awarded.

List what the student did well.

List what they need to improve to get full marks.

Give 2–3 targeted improvement tips for similar questions in the future.

Format the output as:
Question Number:
Mark Awarded: X / Y
Reasoning: …
Strengths: …
Areas to Improve: …
Exam Tips: …

Here is the input:
Question: ${question}
Marking Guide: ${markingGuide}
Student Response: ${studentResponse}

Important compliance notes:
- Only use VCAA copyrighted content if you have rights or permission to use it.
- If the user provided VCAA material, clearly state at the top: \"Source: VCAA materials provided by user; rights & attribution remain with VCAA.\"`;
  }

  async function handleSubmit(e) {
    e.preventDefault();
    setError("");
    setResult("");

    // Validation & legal checks
    if (!agreeRights) {
      setError("You must confirm that you have the necessary rights to use any official VCAA material you provide.");
      return;
    }
    if (!consentVCAA) {
      setError("Please confirm you understand this tool does not impersonate VCAA and that you will attribute VCAA where required.");
      return;
    }
    if (!question || !markingGuide || !studentResponse) {
      setError("Please paste the question, marking guide and student response before submitting.");
      return;
    }
    if (!apiKey) {
      setError("Provide an OpenAI API key to run the assessment (stored locally in your browser if you choose). See the help text for guidance.");
      return;
    }

    setLoading(true);
    try {
      const systemMessage = `You are an expert VCAA-assessor-alike. Be fair, impartial, and strictly follow the marking guide. Output only in the requested structured format.`;
      const userPrompt = buildPrompt();

      // Call OpenAI Chat Completions (fetch to api.openai.com)
      // NOTE: This runs client-side. Make sure you understand security implications of storing an API key in the browser.

      const res = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${apiKey}`,
        },
        body: JSON.stringify({
          model: model,
          messages: [
            { role: "system", content: systemMessage },
            { role: "user", content: userPrompt },
          ],
          max_tokens: 1200,
          temperature: 0.0,
        }),
      });

      if (!res.ok) {
        const t = await res.text();
        throw new Error(`OpenAI API error ${res.status}: ${t}`);
      }

      const data = await res.json();
      const assistantText = data.choices?.[0]?.message?.content || "(no content)";

      // If the user included VCAA material, prepend a clear source attribution line
      const isVCAAProvided = /VCAA/i.test(markingGuide) || /VCAA/i.test(question);
      const sourceLine = isVCAAProvided
        ? "Source: VCAA materials provided by user; rights & attribution remain with VCAA.\n\n"
        : "";

      setResult(sourceLine + assistantText);
    } catch (err) {
      console.error(err);
      setError(err.message || String(err));
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="min-h-screen bg-slate-50 p-6 flex items-start justify-center">
      <div className="max-w-4xl w-full bg-white rounded-2xl shadow-lg p-6">
        <header className="mb-4">
          <h1 className="text-2xl font-semibold">VCAA Assessor AI — (Local)</h1>
          <p className="text-sm text-slate-500 mt-1">Create assessments that follow the VCAA-style assessor prompt. This app does not belong to or impersonate VCAA.</p>
        </header>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <label className="block">
              <div className="text-sm font-medium">Subject (e.g., English, Chemistry)</div>
              <input value={subject} onChange={(e) => setSubject(e.target.value)} placeholder="VCAA VCE Subject" className="mt-1 w-full rounded-md border p-2" />
            </label>

            <label className="block">
              <div className="text-sm font-medium">Model</div>
              <select value={model} onChange={(e) => setModel(e.target.value)} className="mt-1 w-full rounded-md border p-2">
                <option value="gpt-4o-mini">gpt-4o-mini</option>
                <option value="gpt-4o">gpt-4o</option>
                <option value="gpt-3.5-turbo">gpt-3.5-turbo</option>
              </select>
            </label>
          </div>

          <label>
            <div className="text-sm font-medium">Official Question (paste full text)</div>
            <textarea value={question} onChange={(e) => setQuestion(e.target.value)} rows={4} className="mt-1 w-full rounded-md border p-2" />
          </label>

          <label>
            <div className="text-sm font-medium">Marking Guide (paste full text)</div>
            <textarea value={markingGuide} onChange={(e) => setMarkingGuide(e.target.value)} rows={4} className="mt-1 w-full rounded-md border p-2" />
          </label>

          <label>
            <div className="text-sm font-medium">Student Response (paste full text)</div>
            <textarea value={studentResponse} onChange={(e) => setStudentResponse(e.target.value)} rows={6} className="mt-1 w-full rounded-md border p-2" />
          </label>

          <details className="p-3 rounded-md border bg-slate-50">
            <summary className="cursor-pointer font-medium">OpenAI API key (required to run assessment)</summary>
            <div className="mt-3">
              <p className="text-xs text-slate-500">This app calls the OpenAI API directly from your browser. Storing your API key in localStorage is optional. Do not share keys you don't want exposed to this device.</p>
              <div className="mt-2 grid grid-cols-2 gap-2">
                <input value={apiKey} onChange={(e) => setApiKey(e.target.value)} placeholder="sk-..." className="rounded-md border p-2" />
                <div className="flex gap-2">
                  <button type="button" onClick={() => handleSaveKey(apiKey)} className="rounded-md border px-3">Save Key</button>
                  <button type="button" onClick={clearKey} className="rounded-md border px-3">Clear</button>
                </div>
              </div>
            </div>
          </details>

          <div className="flex flex-col gap-2 text-sm">
            <label className="flex items-start gap-3">
              <input type="checkbox" checked={agreeRights} onChange={(e) => setAgreeRights(e.target.checked)} />
              <div>
                <div className="font-medium">I confirm I have the legal right to paste/publish any official VCAA content I provide.</div>
                <div className="text-xs text-slate-500">If you don't have rights for official material, paste only student responses or public paraphrases.</div>
              </div>
            </label>

            <label className="flex items-start gap-3">
              <input type="checkbox" checked={consentVCAA} onChange={(e) => setConsentVCAA(e.target.checked)} />
              <div>
                <div className="font-medium">I understand this tool is independent and does not impersonate or replace VCAA.</div>
                <div className="text-xs text-slate-500">You must attribute VCAA when using their materials and follow their usage rules.</div>
              </div>
            </label>
          </div>

          <div className="flex gap-3 items-center">
            <button type="submit" disabled={loading} className="px-4 py-2 rounded-2xl bg-sky-600 text-white shadow">{loading ? 'Assessing...' : 'Run Assessment'}</button>
            <button type="button" onClick={() => { setQuestion(''); setMarkingGuide(''); setStudentResponse(''); setResult(''); setError(''); }} className="px-3 py-2 rounded-2xl border">Clear</button>
            <div className="text-sm text-slate-500">Result will appear below in the exact VCAA-style format requested.</div>
          </div>

          {error && <div className="p-3 bg-red-50 text-red-700 rounded-md">{error}</div>}
        </form>

        <section className="mt-6">
          <h2 className="text-lg font-semibold">Result</h2>
          <div className="mt-3 p-4 rounded-md border bg-gray-50 min-h-[6rem] whitespace-pre-wrap">
            {result || <span className="text-slate-400">No result yet — run an assessment to see the output here.</span>}
          </div>

          <div className="mt-3 flex gap-2">
            <button type="button" onClick={() => navigator.clipboard.writeText(result)} className="rounded-md border px-3 py-2">Copy Result</button>
            <button type="button" onClick={() => { const a = document.createElement('a'); const blob = new Blob([result], { type: 'text/plain' }); a.href = URL.createObjectURL(blob); a.download = 'vcaa-assessment.txt'; a.click(); }} className="rounded-md border px-3 py-2">Download .txt</button>
          </div>
        </section>

        <footer className="mt-6 text-xs text-slate-500">
          <p>Legal / Compliance notes:</p>
          <ul className="list-disc ml-5">
            <li>This tool is a user-built assistant to format and evaluate student responses against a marking guide. It is not affiliated with VCAA.</li>
            <li>Always ensure you have the right to use any official exam content you paste here. Keep copies of permissions where needed.</li>
            <li>Do not use this tool to distribute confidential or embargoed exam material. Misuse may have legal consequences.</li>
          </ul>
        </footer>
      </div>
    </div>
  );
}
